; =============================================================================
; Company      : Unversity of Glasgow, Comuting Science
; Author:        Syed Waqar Nabi
; 
; Create Date  : 2014.10.27
; Project Name : TyTra
;
; Dependencies : 
;
; Revision     : 
; Revision 0.01. File Created
; Revision 0.02. 2019.06.19: Updated to tybec-17 version, incorporated as a test case
; 
; Conventions  : 
; =============================================================================

; =============================================================================
; General Description
; -----------------------------------------------------------------------------
; Tytra-IR BACKEND file for Coriolis Kernel
;
; While this kernsl has two modes, at run time we may beed to choose one or the 
; other, set by the host-controlled MODE variable
; so we instantiate BOTH mode kernels
; =============================================================================

#define SIZE   1024
#define data_t float32 

;--I have the same arithmetic instructions for data_t/int for now
#define fadd add
#define fsub sub
#define fmul mul
#define fdiv udiv

;--constants initiliazed from values taken from C execution
#define alpha -0.062832
#define beta  0.000987
#define dt    432.000000

;--mode also defined as a macro
#define mode 1

; -----------------------------------------------------------------------------
;-- coriolis_ker0
; -----------------------------------------------------------------------------
define void @coriolis_ker0  ( data_t %u
                            , data_t %v
                            , data_t %un
                            , data_t %vn
                            ) pipe 
{
#if (mode==1)
  data_t %sub   = fsub data_t 1.0, beta
  data_t %mul   = fmul data_t %u, %sub
  data_t %mul1  = fmul data_t alpha, %v
  data_t %add   = fadd data_t %mul, %mul1
  data_t %add2  = fadd data_t 1.0, beta
  data_t %un    = fdiv data_t %add, %add2

  data_t %sub3 = fsub data_t 1.0, beta
  data_t %mul4 = fmul data_t %v, %sub3
  data_t %mul5 = fmul data_t alpha, %u
  data_t %sub6 = fsub data_t %mul4, %mul5
  data_t %add7 = fadd data_t 1.0, beta
  data_t %vn   = fdiv data_t %sub6, %add7
#else
  call @cos(data_t %conv)
  data_t %cos1  = 
  data_t %mul   = fmul data_t %u, %sub
  data_t %mul1  = fmul data_t alpha, %v
  data_t %add   = fadd data_t %mul, %mul1
  data_t %add2  = fadd data_t 1.0, beta
  data_t %un    = fdiv data_t %add, %add2

  data_t %sub3 = fsub data_t 1.0, beta
  data_t %mul4 = fmul data_t %v, %sub3
  data_t %mul5 = fmul data_t alpha, %u
  data_t %sub6 = fsub data_t %mul4, %mul5
  data_t %add7 = fadd data_t 1.0, beta
  data_t %vn   = fdiv data_t %sub6, %add7
#endif                        
  ret void
}    



; -----------------------------------------------------------------------------
;-- coriolis_ker1
; -----------------------------------------------------------------------------
define void @coriolis_ker1  ( data_t %x
                            , data_t %y
                            , data_t %un_local
                            , data_t %vn_local
                            , data_t %xn
                            , data_t %yn
                            , data_t %un
                            , data_t %vn                            
                            ) pipe 
{
  data_t %mul = fmul data_t dt, %un_local
  data_t %div = fdiv data_t %mul, 1000.0
  data_t %xn  = fadd data_t %x, %div
  
  data_t %mul1 = fmul data_t dt, %vn_local
  data_t %div2 = fdiv data_t %mul1, 1000.0
  data_t %yn   = fadd data_t %y, %div2
  
  ;-- string along un and vn
  data_t %un = load data_t %un_local
  data_t %vn = load data_t %vn_local
  ret void
}

; -----------------------------------------------------------------------------
;-- coriolis_ker2
;-- This is simply updating arrays in global memory, which would be handled
;-- outside kernel code anyway, so this is not a real kernel
; -----------------------------------------------------------------------------
;--define void @coriolis_ker2  ( data_t %un
;--                            , data_t %vn
;--                            , data_t %xn
;--                            , data_t %yn
;--                            , data_t %u
;--                            , data_t %v
;--                            , data_t %x
;--                            , data_t %y
;--                            ) pipe 
;--{
;--  data_t %u = load data_t %un
;--  data_t %v = load data_t %vn
;--  data_t %x = load data_t %xn
;--  data_t %y = load data_t %yn
;--  ret void
;--}

; -----------------------------------------------------------------------------
;-- kernel_top
; -----------------------------------------------------------------------------
define void @kernel_top(  data_t %u
                        , data_t %v
                        , data_t %x
                        , data_t %y
                        , data_t %un
                        , data_t %vn
                        , data_t %xn
                        , data_t %yn
                        ) pipe
{
  ;-- I can't allow output arguments in hierarhichial functions to *also* be intermediate
  ;-- arguments between peer kernels
  ;-- That's because each module/node has to be synchronized at the output, so all
  ;-- outputs must be valid _at the same index_ at the same time.
  ;-- This also means ALL outputs have to come from the FINAL CG kernel. This is an arificiial
  ;-- limitation that I should get rid of (TODO)
  
  call @coriolis_ker0 (  data_t %u
                       , data_t %v
                       , data_t %un_local
                       , data_t %vn_local
                       ) 
                        
  call @coriolis_ker1 ( data_t %x
                      , data_t %y
                      , data_t %un_local
                      , data_t %vn_local
                      , data_t %xn
                      , data_t %yn
                      , data_t %un
                      , data_t %vn
                      )  
                      
  ret void
}                        


