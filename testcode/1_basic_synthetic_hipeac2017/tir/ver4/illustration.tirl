;-- =============================================================================
;-- Company      : Unversity of Glasgow, Comuting Science
;-- Author:        Syed Waqar Nabi
;-- 
;-- Create Date  : 2017.01.03
;-- Project Name : TyTra
;--
;-- Dependencies : 
;--
;-- Revision     : 
;-- Revision 0.01. File Created
;-- 
;-- Conventions  : 
;-- =============================================================================
;--
;-- =============================================================================
;-- General Description
;-- -----------------------------------------------------------------------------
;-- Tytra-IR BACKEND file for the "illustration" code 
;-- being used to update IR (primarily) for smart-buffering
;-- 
;-- This is the updated version using TIR-17
;-- ** Version 4 ** split/merge (explicit) with NDmap
;-- =============================================================================

;-- *****************************************************************************
;--                        *** MANAGE-IR ***  
;-- *****************************************************************************
;-- C-style macros 
#define NLinear   2048
  ;-- numner of Kernel Iterations

  
; *****************************************************************************
;                        *** COMPUTE-IR ***
; *****************************************************************************

;-- ModuleID = 'top'
  ;-- top level module for LLVM

  
; -----------------------------------------------------------------------------
; -- ** kernel_map_f1
; -----------------------------------------------------------------------------
define void @kernel_map_f1  ( i32 %vin0_stream_load
                            , i32 %vin0_stream_load_i_p1
                            , i32 %vin0_stream_load_i_n1
                            , i32 %vin1_stream_load
                            , i32 %vconn0_stream_store
                            , i32 %vconn1_stream_store
                            ) pipe {
  i32 %ix = autoindex %vin0_stream_load, !tir.aindex.type !1d, !tir.aindex.range !0 !NLinear-1

  ;-- boundary check comparisons
  i1 %1  = icmp eq i32 %ix, 0
  i1 %2  = icmp eq i32 %ix, NLinear-1
  i1 %3   = or i1 %1, %2
                          
  ;-- the kernel
  i32 %4 = add i32 %vin0_stream_load, %vin1_stream_load
  i32 %5 = add i32 %4               , %vin0_stream_load_i_p1
  i32 %6 = add i32 %5               , %vin0_stream_load_i_n1
  i32 %7 = add i32 %6               , %vin1_stream_load
  
  ;--following added to bring latency to an even number
  i32 %9 = add i32 %7               , %7
  i32 %8 = mul i32 %9               , %vin1_stream_load
  ;--i32 %8 = mul i32 %7               , %vin1_stream_load  
  
  ;-- select pass-through or kernel output based on boundary-check
  i32 %vconn0_stream_store = select i1 %3, i32 %vin0_stream_load, i32 %7
  i32 %vconn1_stream_store = select i1 %3, i32 %vin1_stream_load, i32 %8
  ret void
}

; -----------------------------------------------------------------------------
; -- ** kernel_unzipt_A
; -----------------------------------------------------------------------------

define void @kernel_unzipt_A ( i32 %vconn0_stream_load 
                             , i32 %vconn1_stream_load
                             , i32 %vconn00_stream_store
                             , i32 %vconn10_stream_store
                             ) pipe {
  i32 %vconn00_stream_store = add i32 %vconn0_stream_load, 0
  i32 %vconn10_stream_store = add i32 %vconn1_stream_load, 0
  ret void
}

; -----------------------------------------------------------------------------
; -- ** kernel_map_f2
; -----------------------------------------------------------------------------
define void @kernel_map_f2 ( i32 %vconn10_stream_load
                           , i32 %vconn100_stream_store
                           ) pipe {
  i32 %vconn100_stream_store = add i32 %vconn10_stream_load, %vconn10_stream_load
}

; -----------------------------------------------------------------------------
; -- ** kernel_fold_f2
; -----------------------------------------------------------------------------
define void @kernel_fold_f2 ( i32 %vconn00_stream_load
                            , i32 %s0
                            , i32 %vconn000_stream
                            ) pipe {
;--  i32 %local1 = add  i32 %vconn00_stream_load, %vconn00_stream_load 
  i32 %local1          = add i32 %s0, %vconn00_stream_load                          
  i32 %vconn000_stream = add i32 %local1, %vconn000_stream,  !tir.reduction.size  !NLinear
;--  i32 %sconn000 = add i32 %local1, %sconn000,  !tir.reduction.size  !NLinear
}

; -----------------------------------------------------------------------------
; -- ** kernel_map_f3
; -----------------------------------------------------------------------------
define void @kernel_map_f3 ( i32 %vconn100_stream_load
                           , i32 %sconn000
                           , i32 %vout_stream_store
                           ) pipe {
  i32 %vout_stream_store = add i32 %sconn000, %vconn100_stream_load
}

;-- ----------------------------------------------------------------------------
;-- ** Connecting functions in a (CG) PIPE block
;-- ----------------------------------------------------------------------------
define void @kernelTop  ( i32 %vin0_stream_load
                        , i32 %vin1_stream_load
                        , i32 %s0
                        , i32 %vout_stream_store
                        ) pipe
{
  ;-- "global" memory variable is initialized based on input scalar
  ;-- this memory (register) is used for the reduction operation
  ;-- it is kept in the top scope as it is a connection variable
  ;-- between two CG kernels
  ;-- @sconn000 = addrspace(0)  i32 %s0
  ;-- The above method OBSOLETE. No need to have a differnt way of creating
  ;-- this variable. Why not use the ALLOCA method?
  ;-- %sconn000 = alloca i32
  ;-- store i32 %s0, i32* %sconn000 
  
  ;----------------------------------------------
  ;-- offsets and counter to feed to kernel_map_f1
  ;----------------------------------------------
  i32 %vin0_stream_load_i_p1 = offstream  %vin0_stream_load, !tir.stream.offset !+10
  i32 %vin0_stream_load_i_n1 = offstream  %vin0_stream_load, !tir.stream.offset !-10

  ;-- counter for boundary conditions, synchronized with vin0_stream_load
  ;--i32 %ix = autoindex %vin0_stream_load, !tir.aindex.type !1d, !tir.aindex.range !0 !NLinear-1
  ;--i32 %ix = i32 0, !tir.autoindex1d !0 !NLinear-1, !tir.index.synch !%vin0_stream_load

  ;-- splitting and merging kernel_map_f1
  ;-------------------------------------------------
  ;--split input streams to kernel_map_f1 (including the offset streams)
  ;--splitting offsets should automatically invoke SMART buffering at the backend for optimal
  ;--buffer definition
  i32 <%vin0_stream_load_lane0     , %vin0_stream_load_lane1>      = split i32 %vin0_stream_load      to <2 x i32>
  i32 <%vin1_stream_load_lane0     , %vin1_stream_load_lane1>      = split i32 %vin1_stream_load      to <2 x i32>  
  i32 <%vin0_stream_load_i_p1_lane0, %vin0_stream_load_i_p1_lane1> = split i32 %vin0_stream_load_i_p1 to <2 x i32>  
  i32 <%vin0_stream_load_i_n1_lane0, %vin0_stream_load_i_n1_lane1> = split i32 %vin0_stream_load_i_n1 to <2 x i32>  
  
  ;-- "split" counter?  
  ;--i32 <%ix_lane0, %ix_lane1> = split i32 %ix to <2 x i32>

  call @kernel_map_f1 ( i32 %vin0_stream_load_lane0
                      , i32 %vin0_stream_load_i_p1_lane0
                      , i32 %vin0_stream_load_i_n1_lane0
                      , i32 %vin1_stream_load_lane0
;--                     i32  , %ix_lane0
                      , i32 %vconn0_stream_store_lane0
                      , i32 %vconn1_stream_store_lane0
                      ) 
                      
  call @kernel_map_f1 ( i32 %vin0_stream_load_lane1
                      , i32 %vin0_stream_load_i_p1_lane1
                      , i32 %vin0_stream_load_i_n1_lane1
                      , i32 %vin1_stream_load_lane1
;--                     i32  , %ix_lane1
                      , i32 %vconn0_stream_store_lane1
                      , i32 %vconn1_stream_store_lane1
                      ) 

;-- now we merge into intermediate memory connection 
;-- <-- shouldn't the merge be back into a stream?
;-- and then we can read that stream into a memory if we want...
  %vconn0_stream = merge <2 x i32> <%vconn0_stream_store_lane0, %vconn0_stream_store_lane1> to i32
  %vconn1_stream = merge <2 x i32> <%vconn1_stream_store_lane0, %vconn1_stream_store_lane1> to i32

  ;-- Other kernels
  ;-------------------------------------------------

  call @kernel_unzipt_A ( i32 %vconn0_stream
                        , i32 %vconn1_stream
                        , i32 %vconn00_stream
                        , i32 %vconn10_stream
                        )
                        
  call @kernel_map_f2 ( i32 %vconn10_stream
                      , i32 %vconn100_stream
                      )
                
  call @kernel_fold_f2 ( i32 %vconn00_stream
                       , i32 %s0
                       , i32 %vconn000_stream
                       )

  call @kernel_map_f3 ( i32 %vconn100_stream
                      , i32 %vconn000_stream
                      , i32 %vout_stream_store
                      )
  ret void
}

  

;-------------------------------------------------------------------------------
;--main 
;-------------------------------------------------------------------------------

;--The TyTra-IR is limited to the DEVICE-CODE on the kernel
;--So while we do "declare" variables in the global-memory space
;--we are not worried about initializing (or post-processing) them
;--as that is assumed to happen outside the scope of this device-side
;--program

define void @main () {
;-- MEMORY OBJECTS
;-- We simply use LLVMs global variables call to create memory objects
;-- in LLVM, all "memory objects" are accessed using pointers
;-- addrspace(1) is the global address space, so these
;-- arrays are created in the Global Memory


 ;--@vin0 = addrspace(1) [NLinear x i32]
 @vin0  = alloca [NLinear x i32], addrspace(1) 
 @vin1  = alloca [NLinear x i32], addrspace(1) 
 @vout  = alloca [NLinear x i32], addrspace(1)  

 ;-- *CREATING STREAMS FROM MEMORIES* 
  ;-- The !tir.mem.<property_name> !<property_value> pair
  ;-- is used to specify stream properties
  ;-- being created. In these cases, it is a simple 1d stream
  ;-- from that memory object
  ;-- Note that stream directions are from the P.O.V of memory object
  ;
  ;--//stream_read

 
 %vin0_stream_load = streamread i32, i32*  @vin0 
                      , !tir.stream.type   !stream1d
                      , !tir.stream.size   !NLinear
                      , !tir.stream.saddr  !0
                      , !tir.stream.stride !1

  %vin1_stream_load = streamread i32, i32* @vin1
                      , !tir.stream.type   !stream1d
                      , !tir.stream.size   !NLinear
                      , !tir.stream.saddr  !0
                      , !tir.stream.stride !1
  
  streamwrite i32 %vout_stream_store, i32* @vout
                      , !tir.stream.type   !stream1d
                      , !tir.stream.saddr  !0
                      , !tir.stream.size   !NLinear
                      , !tir.stream.stride !1

  ;--define the constant s0
  ;-- From LLVM-LRM: "The ‘alloca‘ instruction allocates memory on the stack frame of the currently executing function, to be automatically released when this function returns to its caller. "
  ;-- So we use the ALLOCA instruction as a way to create scratchpad/
  ;-- private memory, so that it remains compatible with the
  ;-- LLVM framework 
  ;-- For now, we only allow CONSTANT SCALARS to be declared this way
  ;-- But LLVM-LRM has no such restriction
  ;-- CONSTANT is identified in TIR by the address space = 3
  
  %s0 = alloca i32, addrspace(3)
  store i32 3, i32* %s0

  ;--call the top level kernel and pass it the streams and the constant
  call @kernelTop ( i32 %vin0_stream_load
                  , i32 %vin1_stream_load
                  , i32 %s0
                  , i32 %vout_stream_store
                  )
 
  ret void
}

