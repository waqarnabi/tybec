;-- =========================================================
;-- Company      : Unversity of Glasgow, Comuting Science
;-- Author:        Syed Waqar Nabi
;-- 
;-- Create Date  : 2017.06.19
;-- Project Name : TyTra
;--
;-- Dependencies : 
;--
;-- Revision     : 
;-- Revision 0.01. File Created
;-- 
;-- Conventions  : 
;-- =========================================================
;--
;-- =========================================================
;-- General Description
;-- ---------------------------------------------------------
;-- Tytra-IR BACKEND file for the "barebones" code 
;-- 
;-- This is TIR-17 version
;-- ** Version 1 ** Simple CG pipeline, no splits/merges
;-- =========================================================

;-- **************************************************
;--            *** MANAGE-IR ***  
;-- **************************************************
;-- C-style macros 
;--#define NLinear 1048576
#define NLinear 64
;--#define NLinear 1024

;--#define MINIMAL4TEST


#ifdef MINIMAL4TEST
;-- simplified
; ----------------------------------------------------------
; -- ** kernel_A
; ----------------------------------------------------------
define void @kernel_A ( i32 %ka_vin0 
                      , i32 %ka_vin1
                      , i32 %pred
                      , i32 %ka_vout
                      ) pipe {
  i32 %local1     = add i32 %ka_vin0, %ka_vin1
  i32 %local2     = mul i32 %ka_vin0, %ka_vin1
  i32 %ka_vout    = select i32 %pred, i32 %local1, i32 %local2
  ret void
}

#else
;-- original, introduces buffers
; ----------------------------------------------------------
; -- ** kernel_A
; ----------------------------------------------------------
;--define void @kernel_A ( i32 %ka_vin0 
;--                      , i32 %ka_vin1
;--                      , i32 %ka_vout
;--                      ) pipe {
;--  i32 %local1     = add i32 %ka_vin0, %ka_vin1
;--  i32 %local2     = add i32 %ka_vin0, %ka_vin1
;--  i32 %local3     = sub i32 %local1, %local2
;--
;--  ;--interim: buffer has single tap
;--  ;--i32 %ka_vout    = add i32 %local1, %local3
;--  
;--  ;--final ver; buffer has two taps
;--  i32 %local4     = add i32 %local1, %local3
;--  i32 %ka_vout    = add i32 %local1, %local4
;--
;--  
;--  ret void
;--}
#endif
; ----------------------------------------------------------
; -- ** kernel_B
; ----------------------------------------------------------
define void @kernel_B ( i32 %kb_vin 
                      , i32 %kb_vout
                      ) pipe {
  i32 %kb_vout  = add i32 %kb_vin, %kb_vin
  ret void
}

; ----------------------------------------------------------
; -- ** kernel_C
; ----------------------------------------------------------
define void @kernel_C ( i32 %kc_vin 
                      , i32 %kc_vout
                      ) pipe {
  ;--i32 %temp          = mul i32 %vconn_B_to_C, %vconn_B_to_C
  ;--i32 %vconn_C_to_D  = mul i32 %temp, %temp
  i32 %kc_vout  = mul i32 %kc_vin, %kc_vin
  ret void
}

; ----------------------------------------------------------
; -- ** kernel_D
; ----------------------------------------------------------
define void @kernel_D ( i32 %kd_vin 
                      , i32 %kd_vout
                      ) pipe {
  i32 %kd_vout  = add i32 %kd_vin, %kd_vin
  ret void
}

; ----------------------------------------------------------
; -- ** kernelTop
; ----------------------------------------------------------
define void @kernelTop  ( i32 %kt_vin0
                        , i32 %kt_vin1
                        , i32 %pred
                        , i32 %kt_vout
                        ) pipe
{
  call @kernel_A ( i32 %kt_vin0
                 , i32 %kt_vin1
                 , i32 %pred
                 , i32 %vconn_A_to_B
                 ) 

  call @kernel_B ( i32 %vconn_A_to_B
                 , i32 %vconn_B_to_C
                 ) 

  call @kernel_C ( i32 %vconn_B_to_C
                 , i32 %vconn_C_to_D
                 ) 

  call @kernel_D ( i32 %vconn_C_to_D
                 , i32 %kt_vout
                 ) 
  ret void
}

; ----------------------------------------------------------
; -- ** MAIN
; ----------------------------------------------------------

;--The TyTra-IR is limited to the DEVICE-CODE on the kernel
;--So while we do "declare" variables in the global-memory space
;--we are not worried about initializing (or post-processing) them
;--as that is assumed to happen outside the scope of this device-side
;--program

define void @main () {
;-- MEMORY OBJECTS
;-- in LLVM, all "memory objects" are accessed using pointers
;-- addrspace(1) is the global address space, so these
;-- arrays are created in the Global Memory

;-- note: Earlier I was using @ (globals) for global memories, but
;--       I am changing that to % as I think there was no need for that differentiation
 ;--@vin0 = addrspace(1) [NLinear x ui32]
 %vin0  = alloca [NLinear x i32], addrspace(1) 
 %vin1  = alloca [NLinear x i32], addrspace(1) 
 %pred  = alloca [NLinear x i32], addrspace(1) 
 %vout  = alloca [NLinear x i32], addrspace(1)  

 ;-- *CREATING STREAMS FROM MEMORIES* 
  ;-- The !tir.mem.<property_name> !<property_value> pair
  ;-- is used to specify stream properties
  ;-- being created. In these cases, it is a simple 1d stream
  ;-- from that memory object
  ;-- Note that stream directions are from the P.O.V of memory object
  ;
  ;--//stream_read

 
 %vin0_stream   = streamread i32, i32*  %vin0 
                   , !tir.stream.type   !stream1d
                   , !tir.stream.size   !NLinear
                   , !tir.stream.saddr  !0
                   , !tir.stream.stride !1

  %vin1_stream  = streamread i32, i32* %vin1
                    , !tir.stream.type   !stream1d
                    , !tir.stream.size   !NLinear
                    , !tir.stream.saddr  !0
                    , !tir.stream.stride !1
  
  %pred_stream  = streamread i32, i32* %pred
                    , !tir.stream.type   !stream1d
                    , !tir.stream.size   !NLinear
                    , !tir.stream.saddr  !0
                    , !tir.stream.stride !1
                    
  streamwrite i32 %vout_stream, i32* %vout
                    , !tir.stream.type   !stream1d
                    , !tir.stream.saddr  !0
                    , !tir.stream.size   !NLinear
                    , !tir.stream.stride !1

  ;--call the top level kernel and pass it the streams and the constant
  call @kernelTop ( i32 %vin0_stream
                  , i32 %vin1_stream
                  , i32 %pred_stream
                  , i32 %vout_stream
                  )
 
  ret void
}
