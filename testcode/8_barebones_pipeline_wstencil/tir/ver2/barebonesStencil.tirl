;-- =========================================================
;-- Company      : Unversity of Glasgow, Comuting Science
;-- Author:        Syed Waqar Nabi
;-- 
;-- Create Date  : 2017.06.19
;-- Project Name : TyTra
;--
;-- Dependencies : 
;--
;-- Revision     : 
;-- Revision 0.01. File Created
;-- 
;-- Conventions  : 
;-- =========================================================
;--
;-- =========================================================
;-- General Description
;-- ---------------------------------------------------------
;-- Tytra-IR BACKEND file for the "barebones" code 
;-- 
;-- This is TIR-17 version
;-- ** Version 1 ** Simple CG pipeline, no splits/merges
;-- =========================================================

;-- **************************************************
;--            *** MANAGE-IR ***  
;-- **************************************************
;-- C-style macros 
#define ROWS    8
#define COLS    8
;--#define SIZE   1048576
#define SIZE    (ROWS*COLS)
 ;--#define MINIMAL4TEST
 
; ----------------------------------------------------------
; -- ** kernel_A - 
; ----------------------------------------------------------
define void @kernel_A ( i32 %kt_vin0
                      , i32 %kt_vin0_ip1_j
                      , i32 %kt_vin0_im1_j
                      , i32 %kt_vin0_i_jp1
                      , i32 %kt_vin0_i_jm1
                      , i32 %kt_vin1
                      , i32 %ka_vout
                      , i32 %i
                      , i32 %j
                      ) pipe {
  
  ;-- boundary check booleans
  ;-- TODO: LLVM-IR treats these compund conditions in a very 
  ;-- different way 
  ;-- It generates a series of branch statement, one for each condition
  ;-- translating that to the following code is not straightforward
  ;--(See ../c2llvmExp for generated LL code
  i32 %local1  = icmp eq i32 %i, 0
  i32 %local2  = icmp eq i32 %i, (ROWS-1)
  i32 %local3  = icmp eq i32 %j, 0
  i32 %local4  = icmp eq i32 %j, (COLS-1)
  i32 %local5  = or i32 %local1, %local2                      
  i32 %local6  = or i32 %local3, %local4                      
  i32 %local7  = or i32 %local5, %local6       
    ;--%7 is true for boundaries
                      
  ;--boundary branch            
  i32 %local8 = load i32 %kt_vin0

  ;--other branch
  i32 %local9  = add   i32 %kt_vin0_im1_j, %kt_vin0_ip1_j
  i32 %local10 = add   i32 %kt_vin0_i_jm1, %kt_vin0_i_jp1
  i32 %local11 = add   i32 %local9, %local10
  i32 %local12 = udiv  i32 %local11, 4
  
  ;--select (select cond, true-operand, false-operand)
  i32 %local13 = select i1 %local7, i32 %local8, i32 %local12
  
  ;--compute
  i32 %local   = add i32 %local13, %kt_vin1
  i32 %ka_vout = add i32 %local, %local
  ret void
}


; ----------------------------------------------------------
; -- ** kernel_B
; ----------------------------------------------------------
define void @kernel_B ( i32 %kb_vin 
                      , i32 %kb_vout
                      ) pipe {
  i32 %kb_vout    = add i32 %kb_vin, %kb_vin
  ret void
}

; ----------------------------------------------------------
; -- ** kernel_C
; ----------------------------------------------------------
define void @kernel_C ( i32 %kc_vin 
                      , i32 %kc_vout
                      ) pipe {
  i32 %kc_vout  = add i32 %kc_vin, %kc_vin
  ret void
}

; ----------------------------------------------------------
; -- ** kernel_D
; ----------------------------------------------------------
define void @kernel_D ( i32 %kd_vin 
                      , i32 %kd_vout
                      ) pipe {
  i32 %kd_vout  = add i32 %kd_vin, %kd_vin
  ret void
}

; ----------------------------------------------------------
; -- ** kernelTop
; ----------------------------------------------------------
define void @kernelTop  ( i32 %kt_vin0
                        , i32 %kt_vin1
                        , i32 %kt_vout
                        ) pipe
{
  ;----------------------------------------------
  ;-- offsets and counter to feed to kernel_map_f1
  ;----------------------------------------------
  i32 %kt_vin0_ip1_j = offstream  %kt_vin0, !tir.stream.offset !+1
  i32 %kt_vin0_im1_j = offstream  %kt_vin0, !tir.stream.offset !-1
  i32 %kt_vin0_i_jp1 = offstream  %kt_vin0, !tir.stream.offset !+COLS
  i32 %kt_vin0_i_jm1 = offstream  %kt_vin0, !tir.stream.offset !-COLS
   
  ;-- counter for boundary conditions, synchronized with kt_vin0
  ;-- we need nested (2D) counters 
  ;-- DIM1 (i, range1) is the OUTER index 
  ;-- so this is equivalent of:
  ;--  for i (0:ROWS-1)
  ;--   for j (0:COLS-1)
  i32 %i = autoindex %kt_vin0 , !tir.aindex.type       !2d
                              , !tir.aindex.range      !0 !ROWS-1
                              , !tir.aindex.dimNum     !1
                              , !tir.aindex.nestOver   !%j
                              
  i32 %j = autoindex %kt_vin0 , !tir.aindex.type       !2d
                              , !tir.aindex.range      !0 !COLS-1
                              , !tir.aindex.dimNum     !2
                              ;--, !tir.aindex.nestUnder  !%i
                              ;--nestOver is more useful for code-gen, so nestUnder is redundant (though still valid syntax)


  ;----------------------------------------------
  ;-- Connect peer KERNELS for CG-pipeline
  ;----------------------------------------------
 call @kernel_A ( i32 %kt_vin0
                , i32 %kt_vin0_ip1_j
                , i32 %kt_vin0_im1_j
                , i32 %kt_vin0_i_jp1
                , i32 %kt_vin0_i_jm1
                , i32 %kt_vin1
                , i32 %vconn_A_to_B
                , i32 %i
                , i32 %j
                ) 

  call @kernel_B ( i32 %vconn_A_to_B
                 , i32 %vconn_B_to_C
                 ) 

  call @kernel_C ( i32 %vconn_B_to_C
                 , i32 %vconn_C_to_D
                 ) 

  call @kernel_D ( i32 %vconn_C_to_D
                 , i32 %kt_vout
                 ) 
  ret void
}

; ----------------------------------------------------------
; -- ** MAIN
; ----------------------------------------------------------

;--The TyTra-IR is limited to the DEVICE-CODE on the kernel
;--So while we do "declare" variables in the global-memory space
;--we are not worried about initializing (or post-processing) them
;--as that is assumed to happen outside the scope of this device-side
;--program

define void @main () {

;-- MEMORY OBJECTS
;-- in LLVM, all "memory objects" are accessed using pointers
;-- addrspace(1) is the global address space, so these
;-- arrays are created in the Global Memory

;-- note: Earlier I was using @ (globals) for global memories, but
;--       I am changing that to % as I think there was no need for that differentiation
 ;--@vin0 = addrspace(1) [SIZE x ui32]

 %vin0  = alloca [SIZE x i32], addrspace(1) 
 %vin1  = alloca [SIZE x i32], addrspace(1) 
 %vout  = alloca [SIZE x i32], addrspace(1)  

 ;-- *CREATING STREAMS FROM MEMORIES* 
  ;-- The !tir.mem.<property_name> !<property_value> pair
  ;-- is used to specify stream properties
  ;-- being created. In these cases, it is a simple 1d stream
  ;-- from that memory object
  ;-- Note that stream directions are from the P.O.V of memory object
  ;
  ;--//stream_read

 
 %vin0_stream = streamread i32, i32*  %vin0 
                   , !tir.stream.type   !stream1d
                   , !tir.stream.size   !SIZE
                   , !tir.stream.saddr  !0
                   , !tir.stream.stride !1
                                      

  %vin1_stream = streamread i32, i32* %vin1
                    , !tir.stream.type   !stream1d
                    , !tir.stream.size   !SIZE
                    , !tir.stream.saddr  !0
                    , !tir.stream.stride !1
  
  streamwrite i32 %vout_stream, i32* %vout
                    , !tir.stream.type   !stream1d
                    , !tir.stream.saddr  !0
                    , !tir.stream.size   !SIZE
                    , !tir.stream.stride !1

  ;--call the top level kernel and pass it the streams and the constant
  call @kernelTop ( i32 %vin0_stream
                  , i32 %vin1_stream
                  , i32 %vout_stream
                  )
 
  ret void
}
